///
/// @Generated by Mockolo
///



import Foundation
import Observation
import Security
@testable import FayInterview


class AuthTokenProvidingMock: AuthTokenProviding {
    init() { }
    init(token: String? = nil) {
        self.token = token
    }



    var token: String? = nil
}

class AuthStoringMock: AuthStoring {
    init() { }
    init(authStatus: AuthStatus) {
        self._authStatus = authStatus
    }



    private var _authStatus: AuthStatus!
    var authStatus: AuthStatus {
        get { return _authStatus }
        set { _authStatus = newValue }
    }

    private(set) var loginCallCount = 0
    var loginHandler: ((String, String) async throws -> ())?
    func login(username: String, password: String) async throws {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            try await loginHandler(username, password)
        }
        
    }
}

public class APIRequestingMock: APIRequesting {
    public init() { }


    public private(set) var requestCallCount = 0
    public var requestHandler: ((APIEndpoint) async throws -> Data)?
    public func request(_ endpoint: APIEndpoint) async throws -> Data {
        requestCallCount += 1
        if let requestHandler = requestHandler {
            return try await requestHandler(endpoint)
        }
        return Data()
    }
}

class LoginAPIRequestingMock: LoginAPIRequesting {
    init() { }


    private(set) var loginCallCount = 0
    var loginHandler: ((LoginRequest) async throws -> LoginResponse)?
    func login(loginRequest: LoginRequest) async throws -> LoginResponse {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            return try await loginHandler(loginRequest)
        }
        fatalError("loginHandler returns can't have a default value thus its handler must be set")
    }
}

class AppointmentsSortingMock: AppointmentsSorting {
    init() { }


    private(set) var sortAppointmentsCallCount = 0
    var sortAppointmentsHandler: (([Appointment], Date) -> SortedAppointments)?
    func sortAppointments(_ appointments: [Appointment], currentDate: Date) -> SortedAppointments {
        sortAppointmentsCallCount += 1
        if let sortAppointmentsHandler = sortAppointmentsHandler {
            return sortAppointmentsHandler(appointments, currentDate)
        }
        fatalError("sortAppointmentsHandler returns can't have a default value thus its handler must be set")
    }
}

class AppointmentsStoringMock: AppointmentsStoring {
    init() { }
    init(hasFetchedAppointments: Bool = false, sortedAppointments: SortedAppointments) {
        self.hasFetchedAppointments = hasFetchedAppointments
        self._sortedAppointments = sortedAppointments
    }



    var hasFetchedAppointments: Bool = false


    private var _sortedAppointments: SortedAppointments!
    var sortedAppointments: SortedAppointments {
        get { return _sortedAppointments }
        set { _sortedAppointments = newValue }
    }

    private(set) var fetchAppointmentsCallCount = 0
    var fetchAppointmentsHandler: (() async throws -> ())?
    func fetchAppointments() async throws {
        fetchAppointmentsCallCount += 1
        if let fetchAppointmentsHandler = fetchAppointmentsHandler {
            try await fetchAppointmentsHandler()
        }
        
    }
}

class AppointmentsAPIRequestingMock: AppointmentsAPIRequesting {
    init() { }


    private(set) var fetchAppointmentsCallCount = 0
    var fetchAppointmentsHandler: (() async throws -> [Appointment])?
    func fetchAppointments() async throws -> [Appointment] {
        fetchAppointmentsCallCount += 1
        if let fetchAppointmentsHandler = fetchAppointmentsHandler {
            return try await fetchAppointmentsHandler()
        }
        return [Appointment]()
    }
}

class KeychainServicingMock: KeychainServicing {
    init() { }


    private(set) var setStringCallCount = 0
    var setStringHandler: ((String?, KeychainKey) throws -> ())?
    func setString(_ string: String?, forKey key: KeychainKey) throws {
        setStringCallCount += 1
        if let setStringHandler = setStringHandler {
            try setStringHandler(string, key)
        }
        
    }

    private(set) var stringCallCount = 0
    var stringHandler: ((KeychainKey) throws -> String?)?
    func string(forKey key: KeychainKey) throws -> String? {
        stringCallCount += 1
        if let stringHandler = stringHandler {
            return try stringHandler(key)
        }
        return nil
    }
}

class URLSessionableMock: URLSessionable {
    init() { }


    private(set) var dataCallCount = 0
    var dataHandler: ((URLRequest, (any URLSessionTaskDelegate)?) async throws -> (Data, URLResponse))?
    func data(for request: URLRequest, delegate: (any URLSessionTaskDelegate)?) async throws -> (Data, URLResponse) {
        dataCallCount += 1
        if let dataHandler = dataHandler {
            return try await dataHandler(request, delegate)
        }
        fatalError("dataHandler returns can't have a default value thus its handler must be set")
    }
}



